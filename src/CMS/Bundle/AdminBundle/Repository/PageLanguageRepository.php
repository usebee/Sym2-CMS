<?php

namespace CMS\Bundle\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CMS\Bundle\AdminBundle\Entity\Language;
use CMS\Bundle\AdminBundle\Utilities;


/**
 * PageLanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageLanguageRepository extends EntityRepository
{

    /**
     * get list by language
     *
     * @param type $lang   language
     * @param type $max    max
     * @param type $offset offset
     *
     * @return type
     */
    public function findByLanguage(Language $lang, $max = null, $offset = null)
    {
        return $this->findBy(
            array('language'=>$lang->getId()),
            null,
            $max,
            $offset
        );
    }

    /**
     * @param Language $lang
     *
     * @return type
     */
    public function getTotalByLanguage(Language $lang)
    {
        $entities = $this->findBy(array('language'=>$lang->getId()));

        return count($entities);
    }

    /**
     * Delete language by array id
     *
     * @param array $ids the list id
     *
     * @return boolean
     */
    public function deleteByIds($ids = array())
    {
        $rst = true;
        if (is_array($ids) && count($ids)) {
            foreach ($ids as $id) {
                $pageLanguage = $this->find($id);

                if ($pageLanguage) {
                    $page = $pageLanguage->getPage();

                    //check article is exist in page
                    $article = $this->_em->getRepository("CMSAdminBundle:Article")
                        ->findBy(array('page'=>$page->getId()));
                    if (count($article)>0) {
                        return false;
                    }

                    //Checking page child
                    $childs = $page->getChildren();
                    if (count($childs) > 0) {
                        return false;
                    }

                    //checking to have page language of page
                    //if do not exist then we need to remove page
                    $lstPageLangs = $this->_em->getRepository("CMSAdminBundle:PageLanguage")
                        ->findBy(array('page'=>$page->getId()));
                    if (count($lstPageLangs) == 1) {
                        $this->_em->remove($pageLanguage);
                        $this->_em->remove($page);
                        $this->_em->flush();
                    } else if (count($lstPageLangs) > 1) {
                        $this->_em->remove($pageLanguage);
                        $this->_em->flush();
                    }

                }
            }
        }

        return $rst;
    }

    /**
     * Update alias for page
     * @param \CMS\Bundle\AdminBundle\Entity\Page $page
     */
    public function updateAlias(\CMS\Bundle\AdminBundle\Entity\Page $page)
    {
        $pageLanguages = $this->_em->getRepository($this->_entityName)
            ->findBy(array('page'=>$page->getId()));
        if (is_array($pageLanguages) && count($pageLanguages) > 0) {
            foreach ($pageLanguages as $pageLanguage) {
                $alias = $this->getAliasByName($pageLanguage->getName());
                $aliasOk = false;
                while (!$aliasOk) {
                    $plTemp = $this->_em->getRepository($this->_entityName)
                        ->findOneBy(array('alias'=>$alias));
                    if (!$plTemp) {
                        $aliasOk = true;
                    } else {
                        if ($pageLanguage->getId() != $plTemp->getId()) {
                            $alias .= '-' . $pageLanguage->getId();
                        } else {
                            $aliasOk = true;
                        }
                    }
                }
                $pageLanguage->setAlias($alias);
                $this->_em->persist($pageLanguage);
                $this->_em->flush();
            }
        }
    }

    /**
     * get new Slug at one language
     *
     * @param string $oldSlug oldSlug
     * @param string $newLang newLang
     *
     * @return string
     */
    public function getSwitchSlug($oldSlug, $newLang)
    {
        $pageLang = $this->_em->getRepository($this->_entityName)
                ->findOneBy(array('alias' => $oldSlug));
        $language = $this->_em->getRepository("CMSAdminBundle:Language")
                ->findOneBy(array('lang_key' => $newLang));

        $newPageLang = $this->_em->getRepository($this->_entityName)
                ->findOneBy(array('page' => $pageLang->getPage()->getId(), 'language' => $language->getId()));
        if (!$newPageLang) {
            return '';
        }

        return $newPageLang->getAlias();
    }

    /**
     * find pageLanguage with the page is showreel
     *
     * @param \CMS\Bundle\AdminBundle\Entity\Language $language the language
     *
     * @return type
     */
    public function findShowreel(\CMS\Bundle\AdminBundle\Entity\Language $language)
    {
        $qb = $this->createQueryBuilder('pl')
                ->join('pl.page', 'p')
                ->where('p.is_showreel=:active')
                ->andWhere('pl.language=:langId')
                ->setParameter('active', 1)
                ->setParameter('langId', $language->getId());

        return $qb->getQuery()->getResult();
    }

    /**
     * @param type $idPage page
     * @param type $idLang language
     *
     * @return type
     */
    public function findByIdPageAndIdLanguage($idPage, $idLang)
    {
        return $this->findOneBy(
            array(
                'language' => $idLang,
                'page' => $idPage
        ));
    }

    /**
     * @param type $idPage idPage
     *
     * @return string
     */
    public function getOptions($idPage = '')
    {
        $options = array();
        $repPage = $this->getEntityManager()
                        ->getRepository('CMSAdminBundle:Page');

        //Set default id for option ''
        $pageRoot = $repPage->getPageRoot();
        $options[0]['id'] = 0;
        if (is_object($pageRoot)) {
            $options[0]['id'] = $pageRoot->getId();
        }
        $options[0]['name'] = '';

        //Get default language
        $repLang = $this->getEntityManager()
                        ->getRepository('CMSAdminBundle:Language');
        $entDefaultLang = $repLang->findOneByIsDefault();

        //Get page by default language
        $rst = $this->findByLanguage($entDefaultLang);

        if (is_array($rst) && count($rst) > 0 ) {
            foreach ($rst as $ent) {
                if ($ent->getPage()->getId() != $idPage) {
                    $options[$ent->getPage()->getId()]['id'] = $ent->getPage()->getId();
                    $options[$ent->getPage()->getId()]['name'] =
                            str_repeat('&nbsp;&nbsp;&nbsp;', $ent->getPage()->getLevel() - 1) .
                            ($ent->getPage()->getLevel() == 1 ? '' : 'â””') .
                            ' ' .
                            $ent->getName();
                }
            }
        }

        return $options;
    }

    /**
     * get alias by name
     *
     * @param type $name the name
     *
     * @return type
     */
    private function getAliasByName($name = '')
    {
        $alias = '';
        if (!empty($name)) {
            //Clean string
            $name = Utilities::cleanString($name);
            $alias = strtolower(str_replace(' ', '-', $name));
        }

        return $alias;
    }


}
