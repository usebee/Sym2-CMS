<?php

namespace CMS\Bundle\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use \CMS\Bundle\AdminBundle\Entity\PageLanguage;
use Doctrine\ORM\UnitOfWork;
use CMS\Bundle\AdminBundle\Utilities;

/**
 * ArticleLanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleLanguageRepository extends EntityRepository
{

    /**
     * @param type $criteria criteria
     *
     * @return type
     */
    public function getTotal($criteria = array())
    {
        $rst = $this->findBy($criteria);

        return count($rst);
    }

    /**
     * @param type $articleId articleId
     *
     * @return type
     */
    public function findByArticleId($articleId)
    {
        $rst = array();
        if (!empty($articleId)) {
            $rst = $this->findBy(array('article' => $articleId));
        }

        return $rst;
    }
    /**
     * Delete language by array id
     *
     * @param array $ids
     *
     * @return array
     */
    public function deleteByIds($ids = array())
    {
        $em = $this->getEntityManager();
        $repArticle = $em->getRepository('CMSAdminBundle:Article');

        $rst = array();
        if (is_array($ids) && count($ids)) {
            foreach ($ids as $id) {
                $entity = $this->find($id);
                $idArticle = $entity->getArticle()->getId();

                $em->remove($entity);

                //Get all article language by id article
                //If to have 1 item we need to delete article too
                //else we need delete article language
                $lstArticleLangs = $this->findByArticleId($idArticle);
                if (count($lstArticleLangs) == 1) {
                    if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                        $rst[] = $id;
                    }
                    //delete article too
                    $em->flush();
                    //delete article language
                    $repArticle->deleteByIds(array($idArticle));
                } else {
                    if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                        $rst[] = $id;
                    }
                    //Onlye delete article language
                    $em->flush();
                }
            }
        }

        return $rst;
    }


    /**
     * @param string $oldSlug oldSlug
     * @param string $newLang newLang
     *
     * @return string
     */
    public function getSwitchSlug($oldSlug, $newLang)
    {
        $articleLang = $this->_em->getRepository($this->_entityName)
                ->findOneBy(array('alias' => $oldSlug));
        $language = $this->_em->getRepository("CMSAdminBundle:Language")
                ->findOneBy(array('lang_key' => $newLang));

        $newArticleLang = $this->_em->getRepository($this->_entityName)
                ->findOneBy(array('article' => $articleLang->getArticle()->getId(), 'language' => $language->getId()));
        if (!$newArticleLang) {
            return '';
        }

        return $newArticleLang->getAlias();
    }

    /**
     * Update alias for article
     * @param \CMS\Bundle\AdminBundle\Entity\Article $article
     */
    public function updateAlias(\CMS\Bundle\AdminBundle\Entity\Article $article)
    {
        $articleLanguages = $this->_em->getRepository($this->_entityName)
            ->findBy(array('article'=>$article->getId()));
        if (is_array($articleLanguages) && count($articleLanguages) > 0) {
            foreach ($articleLanguages as $articleLanguage) {
                $alias = $this->getAliasByName($articleLanguage->getTitle());
                $aliasOk = false;
                while (!$aliasOk) {
                    $plTemp = $this->_em->getRepository($this->_entityName)
                        ->findOneBy(array('alias'=>$alias));
                    if (!$plTemp) {
                        $aliasOk = true;
                    } else {
                        if ($articleLanguage->getId() != $plTemp->getId()) {
                            $alias .= '-' . $articleLanguage->getId();
                        } else {
                            $aliasOk = true;
                        }
                    }
                }
                $articleLanguage->setAlias($alias);
                $this->_em->persist($articleLanguage);
                $this->_em->flush();
            }
        }
    }

    /**
     * get alias by name
     *
     * @param type $name the name
     *
     * @return type
     */
    private function getAliasByName($name = '')
    {
        $alias = '';
        if (!empty($name)) {
            //Clean string
            $name = Utilities::cleanString($name);
            $alias = strtolower(str_replace(' ', '-', $name));
        }

        return $alias;
    }
}
