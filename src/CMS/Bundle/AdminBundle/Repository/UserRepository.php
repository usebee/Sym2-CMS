<?php

namespace CMS\Bundle\AdminBundle\Repository;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{

    /**
     * loadUserByUsername
     *
     * @param type $username
     *
     * @return type
     *
     * @throws UsernameNotFoundException
     */
    public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->select('u, g')
            ->leftJoin('u.group', 'g')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery();
        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('User "%s" does not exist.', $username), null, 0, $e);
        }

        return $user;
    }

    /**
     * refreshUser
     *
     * @param \Symfony\Component\Security\Core\User\UserInterface $user
     *
     * @return type
     *
     * @throws UnsupportedUserException
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->find($user->getId());
    }

    /**
     * supportsClass
     *
     * @param type $class
     *
     * @return type
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }


    /**
     * getList
     *
     * @param type $max    max
     * @param type $offset offset
     *
     * @return type
     */
    public function getList($max = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('j');
        if ($max) {
            $qb->setMaxResults($max);
        }
        if ($offset) {
            $qb->setFirstResult($offset);
        }
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * @param type $wheres
     *
     * @return type
     */
    public function getListByCondition($wheres = array())
    {
        $qb = $this->createQueryBuilder('j');
        if (isset($wheres['active'])) {
            $qb->andWhere('j.active=:vActive')
               ->setParameter('vActive', $wheres['active']);
        }
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Get entity languag by id
     *
     * @param int $id
     *
     * @return Language
     */
    public function getById($id)
    {
        $entity = null;
        if (!empty($id)) {
            $entity = $this->find($id);
        }

        return $entity;
    }

    /**
     * get total language
     *
     * @return type
     */
    public function getTotal()
    {
        $query = $this->getEntityManager()
                      ->createQuery('SELECT count(t.id) as total FROM CMS\Bundle\AdminBundle\Entity\User t');

        return $query->getSingleScalarResult();
    }
}
